
PWM_ADC_brightnessControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f9  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000669  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  00000fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000096  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupPWMTimer>:
/*Function to setup PWM using TIMER1 at max frequency*/
void setupPWMTimer()
{
	//Timer1 and mode 14
	//Setting WGM modes
	TCCR1A|=_BV(WGM11)|_BV(COM1A1);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 68       	ori	r24, 0x82	; 130
  98:	80 83       	st	Z, r24
	TCCR1B|=_BV(WGM12)|_BV(WGM13);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	80 83       	st	Z, r24
	
	//setting the prescaler to 1 for maximum frequency
	TCCR1B|=_BV(CS10);
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24

	//setting the top value for the PWM counter. This also controls the PWM frequency
	ICR1=TOPValue;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b6:	08 95       	ret

000000b8 <main>:

int main()
{	
	
	//Setting the OC1A as output
	DDRB|=_BV(PB1);
  b8:	21 9a       	sbi	0x04, 1	; 4
	
	setupPWMTimer();// Setup PWM
  ba:	0e 94 48 00 	call	0x90	; 0x90 <setupPWMTimer>
	
	
	//Setup ADC
	//enable ADC
	ADCSRA|=_BV(ADEN);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	//pre scale the ADC clock to divide by 128 gives ADC clock frequency of 16e6/128=125KHz
	ADCSRA|=_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
  c8:	80 81       	ld	r24, Z
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	80 83       	st	Z, r24
	//select ADC port
	ADMUX|=_BV(MUX0);// port1 selected
  ce:	ac e7       	ldi	r26, 0x7C	; 124
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	8c 93       	st	X, r24
	//select ADC voltage reference
	ADMUX|=_BV(REFS0);
  d8:	8c 91       	ld	r24, X
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8c 93       	st	X, r24
	//enable ADC interrupt. 
	ADCSRA|=_BV(ADIE);
  de:	80 81       	ld	r24, Z
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 83       	st	Z, r24
	//start initial conversion 
	ADCSRA|=_BV(ADSC);
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	
	//enable global interrupts
	sei();
  ea:	78 94       	sei
		
	while(1)
	{
				
		//COMPValue=(*0.01)*TOPValue;
		OCR1A=dutyCycle;
  ec:	e8 e8       	ldi	r30, 0x88	; 136
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	91 83       	std	Z+1, r25	; 0x01
  fa:	80 83       	st	Z, r24
  fc:	f9 cf       	rjmp	.-14     	; 0xf0 <main+0x38>

000000fe <__vector_21>:

}
	
// Interrupt for Conversion completion of ADC	
ISR(ADC_vect)
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	uint8_t low=ADCL;
 112:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high=ADCH;
 116:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	dutyCycle=(high<<8)|low;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	92 2b       	or	r25, r18
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	//start conversion again
	ADCSRA|=_BV(ADSC);
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	
}	
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
