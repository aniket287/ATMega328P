
PIDControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000770  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000694  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ac  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c3  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  88:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupPWMTimer>:
/*Function to setup PWM using TIMER1 at max frequency*/
void setupPWMTimer()
{
	//Timer1 and mode 14
	//Setting WGM modes
	TCCR1A|=_BV(WGM11)|_BV(COM1A1);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 68       	ori	r24, 0x82	; 130
  98:	80 83       	st	Z, r24
	TCCR1B|=_BV(WGM12)|_BV(WGM13);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	80 83       	st	Z, r24
	
	//setting the prescaler to 1 for maximum frequency
	TCCR1B|=_BV(CS10);
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24

	//setting the top value for the PWM counter. This also controls the PWM frequency
	ICR1=TOPValue;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b6:	08 95       	ret

000000b8 <setupADC>:
/*Function to setup ADC using prescaler of 128, giving a sampling rate of around 9000 samples/s*/
void setupADC()
{
	//Setup ADC
	//enable ADC
	ADCSRA|=_BV(ADEN);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
	//pre scale the ADC clock to divide by 128 gives ADC clock frequency of 16e6/128=125KHz
	ADCSRA|=_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	//select ADC port
	ADMUX|=_BV(MUX0);// port1 selected
  c8:	ac e7       	ldi	r26, 0x7C	; 124
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	8c 91       	ld	r24, X
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c 93       	st	X, r24
	//select ADC voltage reference
	ADMUX|=_BV(REFS0);
  d2:	8c 91       	ld	r24, X
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8c 93       	st	X, r24
	//enable ADC interrupt.
	ADCSRA|=_BV(ADIE);
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	//start initial conversion
	ADCSRA|=_BV(ADSC);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <__vector_21>:



// Interrupt for Conversion completion of ADC
ISR(ADC_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	uint8_t low=ADCL;
  fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high=ADCH;
  fe:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCoutput=(high<<8)|low;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	92 2b       	or	r25, r18
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCoutput+0x1>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCoutput>
	
	//select new ADC port if required
	//ADMUX|=_BV(MUX0);// port1 selected
	
	//start conversion again
	ADCSRA|=_BV(ADSC);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <PID>:


uint16_t PID()
{
	uint16_t error=ADCoutput-PV;
 12c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCoutput>
 130:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCoutput+0x1>
	ctrlOutput=kP*(error);
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13c:	28 1b       	sub	r18, r24
 13e:	39 0b       	sbc	r19, r25
 140:	c9 01       	movw	r24, r18
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	82 0f       	add	r24, r18
 154:	93 1f       	adc	r25, r19
 156:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ctrlOutput+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ctrlOutput>
	PV=ctrlOutput;
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	return ctrlOutput;
}
 166:	08 95       	ret

00000168 <main>:
uint16_t PID();

int main()
{
	//Setting the OC1A as output for PWM
	DDRB|=_BV(PB1);
 168:	21 9a       	sbi	0x04, 1	; 4
	
	setupPWMTimer();// Setup PWM
 16a:	0e 94 48 00 	call	0x90	; 0x90 <setupPWMTimer>
	setupADC();// Setup ADC
 16e:	0e 94 5c 00 	call	0xb8	; 0xb8 <setupADC>
	
	
	//enable global interrupts
	sei();
 172:	78 94       	sei
	
	while(1)
	{
		
		//OCR1A=ADCoutput; //Assign duty cycle to register OCR1A of timer1 for required duty cycle
		OCR1A=PID();
 174:	c8 e8       	ldi	r28, 0x88	; 136
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	0e 94 96 00 	call	0x12c	; 0x12c <PID>
 17c:	99 83       	std	Y+1, r25	; 0x01
 17e:	88 83       	st	Y, r24
 180:	fb cf       	rjmp	.-10     	; 0x178 <main+0x10>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
