
PIDControlADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d6  00800100  00800100  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000845  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000322  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000174  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3d       	cpi	r26, 0xD6	; 214
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  9e:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupPWMTimer>:
/*Function to setup PWM using TIMER1 at max frequency*/
void setupPWMTimer()
{
	//Timer1 and mode 14
	//Setting WGM modes
	TCCR1A|=_BV(WGM11)|_BV(COM1A1);
  a6:	e0 e8       	ldi	r30, 0x80	; 128
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 68       	ori	r24, 0x82	; 130
  ae:	80 83       	st	Z, r24
	TCCR1B|=_BV(WGM12)|_BV(WGM13);
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	80 83       	st	Z, r24
	
	//setting the prescaler to 1 for maximum frequency
	TCCR1B|=_BV(CS10);
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24

	//setting the top value for the PWM counter. This also controls the PWM frequency
	ICR1=TOPValue;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  c8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  cc:	08 95       	ret

000000ce <setupADC>:
/*Function to setup ADC in the non free running mode using prescaler of 128, giving a sampling rate of around 9000 samples/s*/
void setupADC()
{
	//Setup ADC
	//enable ADC
	ADCSRA|=_BV(ADEN);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
	//pre scale the ADC clock to divide by 128 gives ADC clock frequency of 16e6/128=125KHz
	ADCSRA|=_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
	//select ADC port
	ADMUX|=_BV(MUX0);// port1 selected
  de:	ac e7       	ldi	r26, 0x7C	; 124
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8c 93       	st	X, r24
	//select ADC voltage reference
	ADMUX|=_BV(REFS0);
  e8:	8c 91       	ld	r24, X
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	8c 93       	st	X, r24
	//enable ADC interrupt.
	ADCSRA|=_BV(ADIE);
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
	//start initial conversion
	ADCSRA|=_BV(ADSC);
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <__vector_21>:



// Interrupt for Conversion completion of ADC
ISR(ADC_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	uint8_t low=ADCL;
 110:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high=ADCH;
 114:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCoutput=(high<<8)|low;
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	92 2b       	or	r25, r18
 11c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCoutput+0x1>
 120:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCoutput>
	
	if(bit_is_set(ADMUX,MUX1)) //if A2 is active
 124:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 128:	81 ff       	sbrs	r24, 1
 12a:	11 c0       	rjmp	.+34     	; 0x14e <__vector_21+0x52>
	{
		//select ADC port
		ADMUX&=~_BV(MUX1);// Deactivate A2 
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	80 83       	st	Z, r24
		ADMUX|=_BV(MUX0);// Activate A1
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
		
		followPot=ADCoutput;
 13c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCoutput>
 140:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCoutput+0x1>
 144:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 14c:	14 c0       	rjmp	.+40     	; 0x176 <__vector_21+0x7a>
	}
	
	else if(bit_is_set(ADMUX,MUX0))// if A1 is active
 14e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 152:	80 ff       	sbrs	r24, 0
 154:	10 c0       	rjmp	.+32     	; 0x176 <__vector_21+0x7a>
	{
		//select second ADC port
		ADMUX&=~_BV(MUX0);// Deactivate A1
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
		ADMUX|=_BV(MUX1);// Activate A2
 160:	80 81       	ld	r24, Z
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
		
		controlPot=ADCoutput;
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCoutput>
 16a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCoutput+0x1>
 16e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <controlPot+0x1>
 172:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <controlPot>
	}
	
	
	//start conversion again after ADC value has been obtained
	ADCSRA|=_BV(ADSC);
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	80 83       	st	Z, r24
	
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <PID>:

//PID control function
uint16_t PID(uint16_t controlPot, uint16_t followPot)
{	
 194:	85 38       	cpi	r24, 0x85	; 133
 196:	23 e0       	ldi	r18, 0x03	; 3
 198:	92 07       	cpc	r25, r18
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <PID+0xc>
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	93 e0       	ldi	r25, 0x03	; 3
	if(controlPot>Max)
		controlPot=Max;
	if(controlPot<Min)
 1a0:	84 36       	cpi	r24, 0x64	; 100
 1a2:	91 05       	cpc	r25, r1
 1a4:	10 f4       	brcc	.+4      	; 0x1aa <PID+0x16>
		controlPot=Min;
 1a6:	84 e6       	ldi	r24, 0x64	; 100
 1a8:	90 e0       	ldi	r25, 0x00	; 0
	
	//float	dt=0.0001;	
	int16_t error=controlPot-followPot;
	//eint=eint+error*dt;
	
	int16_t controlSignal=	KP*error;//Implementation of P only controller
 1aa:	86 1b       	sub	r24, r22
 1ac:	97 0b       	sbc	r25, r23
 1ae:	9c 01       	movw	r18, r24
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
 1c4:	9c 01       	movw	r18, r24
 1c6:	99 23       	and	r25, r25
 1c8:	24 f4       	brge	.+8      	; 0x1d2 <PID+0x3e>
 1ca:	22 27       	eor	r18, r18
 1cc:	33 27       	eor	r19, r19
 1ce:	28 1b       	sub	r18, r24
 1d0:	39 0b       	sbc	r19, r25
	if(controlSignal<0)
		controlSignal=controlSignal*-1;
	if(controlSignal>TOPValue)
		controlSignal=TOPValue;
		
	return controlSignal;
 1d2:	c9 01       	movw	r24, r18
 1d4:	81 15       	cp	r24, r1
 1d6:	24 e0       	ldi	r18, 0x04	; 4
 1d8:	92 07       	cpc	r25, r18
 1da:	14 f0       	brlt	.+4      	; 0x1e0 <PID+0x4c>
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	93 e0       	ldi	r25, 0x03	; 3
	
}
 1e0:	08 95       	ret

000001e2 <main>:
uint16_t PID(uint16_t, uint16_t); //Function to do PID control of Motor position

int main()
{
	//Setting the OC1A as output for PWM
	DDRB|=_BV(PB1);
 1e2:	21 9a       	sbi	0x04, 1	; 4
	
	//Setting portD pins 6 and 7 as output for motor direction control
	DDRD|=_BV(PD6)|_BV(PD7);
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	80 6c       	ori	r24, 0xC0	; 192
 1e8:	8a b9       	out	0x0a, r24	; 10
	
	setupPWMTimer();// Setup PWM
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <setupPWMTimer>
	setupADC();// Setup ADC
 1ee:	0e 94 67 00 	call	0xce	; 0xce <setupADC>
	
	
	//enable global interrupts
	sei();
 1f2:	78 94       	sei
 1f4:	e6 e0       	ldi	r30, 0x06	; 6
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(int counter=0;counter<1000;++counter)
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
	{
		a[counter]=counter;
 1fc:	81 93       	st	Z+, r24
 1fe:	91 93       	st	Z+, r25
	
	
	//enable global interrupts
	sei();
	
	for(int counter=0;counter<1000;++counter)
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	88 3e       	cpi	r24, 0xE8	; 232
 204:	23 e0       	ldi	r18, 0x03	; 3
 206:	92 07       	cpc	r25, r18
 208:	c9 f7       	brne	.-14     	; 0x1fc <main+0x1a>
		
		//checking current position of follower
		if(followPot<100|| followPot>900)
			OCR1A=0;
		else
			OCR1A=(uint16_t)dutycycle;
 20a:	08 e8       	ldi	r16, 0x88	; 136
 20c:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		
		//OCR1A=ADCoutput; //Assign duty cycle to register OCR1A of timer1 for required duty cycle
		uint16_t dutycycle=PID(controlPot, followPot);
 20e:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_end>
 212:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_end+0x1>
 216:	be 01       	movw	r22, r28
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <controlPot>
 21c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <controlPot+0x1>
 220:	0e 94 ca 00 	call	0x194	; 0x194 <PID>
		
		//checking current position of follower
		if(followPot<100|| followPot>900)
 224:	c4 56       	subi	r28, 0x64	; 100
 226:	d1 09       	sbc	r29, r1
 228:	c1 32       	cpi	r28, 0x21	; 33
 22a:	d3 40       	sbci	r29, 0x03	; 3
 22c:	20 f0       	brcs	.+8      	; 0x236 <main+0x54>
			OCR1A=0;
 22e:	f8 01       	movw	r30, r16
 230:	11 82       	std	Z+1, r1	; 0x01
 232:	10 82       	st	Z, r1
 234:	03 c0       	rjmp	.+6      	; 0x23c <main+0x5a>
		else
			OCR1A=(uint16_t)dutycycle;
 236:	f8 01       	movw	r30, r16
 238:	91 83       	std	Z+1, r25	; 0x01
 23a:	80 83       	st	Z, r24
	
		
		//check direction
		if(followPot<controlPot)
 23c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 240:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <controlPot>
 248:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <controlPot+0x1>
 24c:	28 17       	cp	r18, r24
 24e:	39 07       	cpc	r19, r25
 250:	18 f4       	brcc	.+6      	; 0x258 <main+0x76>
			RIGHT;
 252:	5f 9a       	sbi	0x0b, 7	; 11
 254:	5e 98       	cbi	0x0b, 6	; 11
 256:	db cf       	rjmp	.-74     	; 0x20e <main+0x2c>
		else
			LEFT;
 258:	5e 9a       	sbi	0x0b, 6	; 11
 25a:	5f 98       	cbi	0x0b, 7	; 11
 25c:	d8 cf       	rjmp	.-80     	; 0x20e <main+0x2c>

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
