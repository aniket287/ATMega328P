
PositionControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ef  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c5  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fc  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015f  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupPWMTimer>:
/*Function to setup PWM using TIMER1 at max frequency*/
void setupPWMTimer()
{
	//Timer1 and mode 14
	//Setting WGM modes
	TCCR1A|=_BV(WGM11)|_BV(COM1A1);
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 68       	ori	r24, 0x82	; 130
  98:	80 83       	st	Z, r24
	TCCR1B|=_BV(WGM12)|_BV(WGM13);
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	80 83       	st	Z, r24
	
	//setting the prescaler to 1 for maximum frequency
	TCCR1B|=_BV(CS10);
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24

	//setting the top value for the PWM counter. This also controls the PWM frequency
	ICR1=TOPValue;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b6:	08 95       	ret

000000b8 <setupADC>:
/*Function to setup ADC in the non free running mode using prescaler of 128, giving a sampling rate of around 9000 samples/s*/
void setupADC()
{
	//Setup ADC
	//enable ADC
	ADCSRA|=_BV(ADEN);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24
	//pre scale the ADC clock to divide by 128 gives ADC clock frequency of 16e6/128=125KHz
	ADCSRA|=_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	//select ADC port
	ADMUX|=_BV(MUX0);// port1 selected
  c8:	ac e7       	ldi	r26, 0x7C	; 124
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	8c 91       	ld	r24, X
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c 93       	st	X, r24
	//select ADC voltage reference
	ADMUX|=_BV(REFS0);
  d2:	8c 91       	ld	r24, X
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8c 93       	st	X, r24
	//enable ADC interrupt.
	ADCSRA|=_BV(ADIE);
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	//start initial conversion
	ADCSRA|=_BV(ADSC);
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <__vector_21>:



// Interrupt for Conversion completion of ADC
ISR(ADC_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	uint8_t low=ADCL;
  fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high=ADCH;
  fe:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCoutput=(high<<8)|low;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	92 2b       	or	r25, r18
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCoutput+0x1>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCoutput>
	
	if(bit_is_set(ADMUX,MUX1)) //if A2 is active
 10e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 112:	81 ff       	sbrs	r24, 1
 114:	11 c0       	rjmp	.+34     	; 0x138 <__vector_21+0x52>
	{
		//select ADC port
		ADMUX&=~_BV(MUX1);// Deactivate A2
 116:	ec e7       	ldi	r30, 0x7C	; 124
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	80 83       	st	Z, r24
		ADMUX|=_BV(MUX0);// Activate A1
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
		
		controlPot=ADCoutput;
 126:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCoutput>
 12a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCoutput+0x1>
 12e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <controlPot+0x1>
 132:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <controlPot>
 136:	14 c0       	rjmp	.+40     	; 0x160 <__vector_21+0x7a>
	}
	
	else if(bit_is_set(ADMUX,MUX0))// if A1 is active
 138:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 13c:	80 ff       	sbrs	r24, 0
 13e:	10 c0       	rjmp	.+32     	; 0x160 <__vector_21+0x7a>
	{
		//select second ADC port
		ADMUX&=~_BV(MUX0);// Deactivate A1
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	80 83       	st	Z, r24
		ADMUX|=_BV(MUX1);// Activate A2
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
		
		followPot=ADCoutput;
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCoutput>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCoutput+0x1>
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	
	//start conversion again after ADC value has been obtained
	ADCSRA|=_BV(ADSC);
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
	
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <PID>:
//PID control function
uint16_t PID(uint16_t controlPot, uint16_t followPot)
{
	
	int16_t posError=controlPot-followPot;
	int16_t controlSignal=	KP*posError;//Implementation of P only controller
 17e:	86 1b       	sub	r24, r22
 180:	97 0b       	sbc	r25, r23
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	82 0f       	add	r24, r18
 196:	93 1f       	adc	r25, r19
 198:	9c 01       	movw	r18, r24
 19a:	99 23       	and	r25, r25
 19c:	24 f4       	brge	.+8      	; 0x1a6 <PID+0x28>
 19e:	22 27       	eor	r18, r18
 1a0:	33 27       	eor	r19, r19
 1a2:	28 1b       	sub	r18, r24
 1a4:	39 0b       	sbc	r19, r25
	if(controlSignal<0)
		controlSignal=controlSignal*-1;
	if(controlSignal>TOPValue)
		controlSignal=TOPValue;
	
	return controlSignal;
 1a6:	c9 01       	movw	r24, r18
 1a8:	81 15       	cp	r24, r1
 1aa:	24 e0       	ldi	r18, 0x04	; 4
 1ac:	92 07       	cpc	r25, r18
 1ae:	14 f0       	brlt	.+4      	; 0x1b4 <PID+0x36>
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	93 e0       	ldi	r25, 0x03	; 3
	
}
 1b4:	08 95       	ret

000001b6 <main>:
uint16_t PID(uint16_t, uint16_t); //Function to do PID control of Motor position

int main()
{
	//Setting the OC1A as output for PWM
	DDRB|=_BV(PB1);
 1b6:	21 9a       	sbi	0x04, 1	; 4
	
	//Setting portD pins 6 and 7 as output for motor direction control
	DDRD|=_BV(PD6)|_BV(PD7);
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	80 6c       	ori	r24, 0xC0	; 192
 1bc:	8a b9       	out	0x0a, r24	; 10
	
	setupPWMTimer();// Setup PWM
 1be:	0e 94 48 00 	call	0x90	; 0x90 <setupPWMTimer>
	setupADC();// Setup ADC
 1c2:	0e 94 5c 00 	call	0xb8	; 0xb8 <setupADC>
	
	
	//enable global interrupts
	sei();
 1c6:	78 94       	sei
		
		//checking current position of follower
		if(followPot<Min	|| followPot>Max)
		OCR1A=0;
		else
		OCR1A=(uint16_t)dutycycle;
 1c8:	08 e8       	ldi	r16, 0x88	; 136
 1ca:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		
		//OCR1A=ADCoutput; //Assign duty cycle to register OCR1A of timer1 for required duty cycle
		uint16_t dutycycle=PID(controlPot, followPot);
 1cc:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <_edata>
 1d0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <_edata+0x1>
 1d4:	be 01       	movw	r22, r28
 1d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <controlPot>
 1da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <controlPot+0x1>
 1de:	0e 94 bf 00 	call	0x17e	; 0x17e <PID>
		
		//checking current position of follower
		if(followPot<Min	|| followPot>Max)
 1e2:	c4 56       	subi	r28, 0x64	; 100
 1e4:	d1 09       	sbc	r29, r1
 1e6:	c1 32       	cpi	r28, 0x21	; 33
 1e8:	d3 40       	sbci	r29, 0x03	; 3
 1ea:	20 f0       	brcs	.+8      	; 0x1f4 <main+0x3e>
		OCR1A=0;
 1ec:	f8 01       	movw	r30, r16
 1ee:	11 82       	std	Z+1, r1	; 0x01
 1f0:	10 82       	st	Z, r1
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <main+0x44>
		else
		OCR1A=(uint16_t)dutycycle;
 1f4:	f8 01       	movw	r30, r16
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
		
		
		//check direction
		if(followPot<controlPot)
 1fa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1fe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <controlPot>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <controlPot+0x1>
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	18 f4       	brcc	.+6      	; 0x216 <main+0x60>
		LEFT;
 210:	5e 9a       	sbi	0x0b, 6	; 11
 212:	5f 98       	cbi	0x0b, 7	; 11
 214:	db cf       	rjmp	.-74     	; 0x1cc <main+0x16>
		else
		RIGHT;
 216:	5f 9a       	sbi	0x0b, 7	; 11
 218:	5e 98       	cbi	0x0b, 6	; 11
 21a:	d8 cf       	rjmp	.-80     	; 0x1cc <main+0x16>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
